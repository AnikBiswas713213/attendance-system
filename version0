import face_recognition as fr
import cv2 as cv
from tkinter import Tk
import pandas as pd

import time
import cv2
from tkinter.filedialog import askopenfilename
import os
Tk().withdraw()
#load_image = askopenfilename()
people=[]
attendance=[]

webCam = cv2.VideoCapture(0)
currentframe = 0
dir_path = 'people1'
count = 0
# Iterate directory
for path in os.listdir(dir_path):
    # check if current path is a file
    if os.path.isfile(os.path.join(dir_path, path)):
        count += 1

def encode_faces(folder):
    list_people_encoding = []
    for filename in os.listdir(folder):
        known_image = fr.load_image_file(f'{folder}{filename}')
        known_encoding = fr. face_encodings(known_image)[0]
        list_people_encoding.append((known_encoding, filename))
    return list_people_encoding

def find_target_face () :
    face_location = fr.face_locations(target_image)
    for person in encode_faces ("people/"):
        encoded_face = person[0]
        filename = person[1]
        is_target_face = fr.compare_faces (encoded_face, target_encoding, tolerance=0.55)
        print(f'{is_target_face} {filename}')



    if face_location:
        face_number = 0
        for location in face_location:
            if is_target_face[face_number]:
                label = filename
                create_frame(location, label)
            face_number+=1


def create_frame(location, label):
    top, right, bottom, left = location
    cv.rectangle(target_image, (left,top), (right, bottom), (255, 0, 0), 2)
    cv.rectangle(target_image, (left, bottom + 20), (right, bottom), (255, 0, 0), cv. FILLED)
    cv.putText(target_image, label, (left + 3, bottom + 14), cv.FONT_HERSHEY_DUPLEX, 0.4, (255, 255, 255), 1)

def render_image () :
    rgb_img = cv.cvtColor(target_image, cv. COLOR_BGR2RGB)
    cv.imshow('Face Recognition', rgb_img)
    cv.waitKey(0)
'''
while True:
    success, frame = webCam.read()
    # Save Frame by Frame into disk using imwrite method
    cv2.imshow("Output", frame)
    cv2.imwrite('people1/Frame' + str(currentframe) + '.jpg', frame)
    currentframe += 1
    time.sleep(2)
    if currentframe == 4:
        break
'''
webCam.release()
cv2.destroyAllWindows()

for i in [1,2,3]:
    target_image = fr. load_image_file(f"people1/people{i}.png")
    target_encoding = fr. face_encodings(target_image)
    find_target_face()


